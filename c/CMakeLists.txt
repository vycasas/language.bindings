cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
project(clib C)

if (UNIX)
    set(C_FLAGS "-std=c11 -W -Wall -Wextra -Werror -pedantic -pedantic-errors")
    set(SHARED_LIBRARY_C_FLAGS "-fpic -fPIC -fvisibility=hidden")
    set(EXECUTABLE_C_FLAGS "-fpie -fPIE")
    set(LINKER_FLAGS "")
    set(SHARED_LIBRARY_LINKER_FLAGS "")
    set(EXECUTABLE_LINKER_FLAGS "")
    set(SYSTEM_LIBS c)
elseif (MSVC)
    set(C_FLAGS "")
    set(SHARED_LIBRARY_C_FLAGS "")
    set(EXECUTABLE_C_FLAGS "")
    set(LINKER_FLAGS "")
    set(SHARED_LIBRARY_LINKER_FLAGS "")
    set(EXECUTABLE_LINKER_FLAGS "")
    set(SYSTEM_LIBS "")
endif ()

set(CMAKE_C_FLAGS "${C_FLAGS} ${CMAKE_C_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS "${LINKER_FLAGS} ${SHARED_LIBRARY_LINKER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${LINKER_FLAGS} ${EXECUTABLE_LINKER_FLAGS}")
include_directories(${CMAKE_SOURCE_DIR})

add_library(clib SHARED api.c api.h)
target_link_libraries(clib ${SYSTEM_LIBS})
set_target_properties(clib PROPERTIES COMPILE_FLAGS "${SHARED_LIBRARY_C_FLAGS}")

add_executable(test_c test/test.c)
target_link_libraries(test_c clib ${SYSTEM_LIBS})
set_target_properties(test_c PROPERTIES COMPILE_FLAGS "${EXECUTABLE_C_FLAGS}")
